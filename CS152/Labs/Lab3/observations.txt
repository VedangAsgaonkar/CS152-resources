STACK CLASS:
Model1) It was a very basic approach in which the stack is created as a global variable. The functions defined can operate
	only on this stack. Thus this model lacks in terms of multi object creation, security and encapsulation. It belongs
	to a procedural paradigm.
Model2) A slightly more advanced approach was used. Two stacks were created as arrays in main with their own members were
	also present in main. The methods were defined to be able to act on any stack. The stack arrays name was passed by 
	value and hence the stack elements were passed by pointer to the methods. Also the member variables of the stacks
	were passed by reference to the method, allowing for changes. The model allows for multi object creation but lacks
	in terms of security and encapsulation. It belongs to a procedural paradigm.
Model3) A great improvement over the previous model. A struct Stack was defined. It had its own member variables. The stack
	elements are stored via a pointer into heap memory allowing us to create stacks of variable length. The use of
	constructors and destructors can be seen. Also member methods have been defined to make changes to the reciever.
	Thus the model provides multi-object creation and encapsulation. But it lacks security since the member variables
	can be accessed directly inside main and alterred in erronous ways. It lies somewhere in between procedural and 
	object oriented paradigms.
Model4) The program represents the advantages of object oriented paradigm. A class Stack is defined. It has member variables
	which are declared private. The stack elements are stored via a pointer into heap memory allowing us to create 
	stacks of variable length. The use of constructors and destructors can be seen. Also public member methods have been 
	defined to make changes to the reciever. The stacks can also be manipulated using several other methods and overloaded
	operators. The model provides security, encapsulation and multi object creation, besides supporting seperation of 
	concerns between the designer and user.

QUEUE CLASS:
	The program represents the advantages of object oriented paradigm. A class Stack is defined. It has member variables
	which are declared private. The stack elements are stored via a pointer into heap memory allowing us to create 
	stacks of variable length. The use of constructors and destructors can be seen. Also public member methods have been 
	defined to make changes to the reciever.

GATE CLASS:
	The Gate class is defined with an abstract method fire(). The two classes AND and OR inherit from the Gate class and
	give suitable implementation to the method fire(). Hence the program displays the advantages of inheritance, common
	characteristics and behaviours have to be defined only once and can be extended by the child classes.